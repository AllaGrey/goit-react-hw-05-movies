{"version":3,"file":"static/js/337.7fe73b50.chunk.js","mappings":"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","sources":["components/API/API.jsx","components/MoviesPage/MoviesPage.styled.jsx","components/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '4c160d44a5a09b17954e70f9ad157f70';\nconst trending = 'trending/movie/day?';\n\nexport async function getMovie() {\n  const resp = await axios(`${BASE_URL}${trending}api_key=${API_KEY}`);\n  const data = resp.data.results;\n  return data;\n}\n\nexport async function getMovieBySearch(search) {\n  const resp = await axios(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${search}`\n  );\n  const data = resp.data.results;\n  return data;\n}\n\nexport async function getMovieById(id) {\n  const resp = await axios(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return resp.data;\n}\n\nexport async function getMovieByIdCast(id) {\n  const resp = await axios(`${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`);\n  return resp.data.cast;\n}\n\nexport async function getMovieByIdReview(id) {\n  const resp = await axios(`${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`);\n  return resp.data.results;\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesSection = styled.div`\n  padding-top: 30px;\n`;\n\nexport const SearchForm = styled.form``;\n\nexport const Input = styled.input`\n  outline: none;\n  height: 30px;\n  border-radius: 0;\n  border: 1px solid darkblue;\n`;\n\nexport const Button = styled.button`\n  height: 34px;\n  background-color: darkblue;\n  color: white;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const MoviesList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  padding-left: 0;\n  gap: 10px;\n`;\n\nexport const MoviesListItem = styled.li`\n  width: 250px;\n  text-align: center;\n  transition: transform 0.35s;\n  :hover {\n    transform: scale(1.05);\n    box-shadow: 10px 10px 10px -8px rgba(0, 0, 0, 0.75);\n  }\n`;\n\nexport const MovieImg = styled.img`\n  display: block;\n  max-width: 100%;\n`;\n\nexport const MoviesLink = styled(Link)`\n  text-decoration: none;\n  color: darkblue;\n`;\n\nexport const MovieText = styled.p`\n  height: 40px;\n`;\n\nexport const NoPhoto = styled.p`\n  height: 375px;\n  text-align: center;\n  margin: 0;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  background-color: lightblue;\n`;\n","import { useEffect, useState } from 'react';\nimport { getMovieBySearch } from 'components/API/API';\nimport {\n  MoviesSection,\n  SearchForm,\n  Input,\n  Button,\n  MoviesList,\n  MovieImg,\n  MoviesListItem,\n  MoviesLink,\n  MovieText,\n  NoPhoto,\n} from './MoviesPage.styled';\nimport { toast } from 'react-hot-toast';\nimport { ClipLoader } from 'react-spinners';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [searchValue, setSearchValue] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const query = searchParams.get('query');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query !== null) {\n      setIsLoading(true);\n      getMovieBySearch(query)\n        .then(resp => {\n          setIsLoading(false);\n          if (resp.length === 0)\n            throw new Error(\"Oooops, we don't have such movies for you.\");\n          setMovies(resp);\n        })\n        .catch(({ message }) => toast.error(message));\n    }\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: searchValue.toLowerCase() });\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    setSearchValue(e.target.value);\n  };\n\n  return (\n    <MoviesSection>\n      <SearchForm onSubmit={onSubmit}>\n        <label>\n          <Input\n            placeholder=\"Search movies...\"\n            onChange={onSearch}\n            value={searchValue}\n          />\n        </label>\n        <Button type=\"submit\">Search</Button>\n      </SearchForm>\n      {isLoading && <ClipLoader />}\n      <MoviesList>\n        {movies &&\n          movies.map(({ id, title, poster_path, release_date }) => (\n            <MoviesList key={id}>\n              <MoviesListItem>\n                <MoviesLink to={`/movies/${id}`} state={{ from: location }}>\n                  {poster_path ? (\n                    <MovieImg\n                      src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                      alt=\"\"\n                    />\n                  ) : (\n                    <NoPhoto>No photo</NoPhoto>\n                  )}\n                  <MovieText>\n                    {title + ' (' + new Date(release_date).getFullYear() + ')'}\n                  </MovieText>\n                </MoviesLink>\n              </MoviesListItem>\n            </MoviesList>\n          ))}\n      </MoviesList>\n    </MoviesSection>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["BASE_URL","API_KEY","trending","getMovie","axios","resp","data","results","getMovieBySearch","search","getMovieById","id","getMovieByIdCast","cast","getMovieByIdReview","MoviesSection","styled","SearchForm","Input","Button","MoviesList","MoviesListItem","MovieImg","MoviesLink","Link","MovieText","NoPhoto","useState","searchValue","setSearchValue","useSearchParams","searchParams","setSearchParams","movies","setMovies","isLoading","setIsLoading","query","get","location","useLocation","useEffect","then","length","Error","catch","message","toast","onSubmit","e","preventDefault","toLowerCase","placeholder","onChange","target","value","type","ClipLoader","map","title","poster_path","release_date","to","state","from","src","alt","Date","getFullYear"],"sourceRoot":""}